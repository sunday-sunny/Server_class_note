JSP, Java Server Pages
- 서블릿의 다음 버전


서블릿
1. 장점 > 자바 기반, 자바 구문을 사용할 수 있다. > 자바 클래스 사용
2. 단점 > 자바 베이스 > 클라이언트 코드 작성이 불편하다. > 문자열 취급
		> 가상 주소 매핑 필요


JSP
1. 장점 > HTML 문서 기반 > 클라이언트 코드 작성이 쉽다. > 구문 인식
		> 가상 주소 매핑 불필요 > 직접 호출 가능
2. 단점 > HTML 문서 베이스 > 자바 구문 작성이 불편하다.



JSP 요소
1. JSP 지시자, JSP Directive
	- page 지시자
	- include 지시자
		- <%@ include file="경로" %>
		- 특정 JSP/HTML 페이지를 다른 JSP 페이지의 일부 영역에 삽입하는 기술
		- 조각 페이지
		- <iframe> 태그와 유사
		- 여러 페이지에서 반복되는 내용을 조각 페이지로 만들어서 재사용하기 위해서 사용!
		
	- taglib 지시자

2. 스크립트 요소, Scripting Elements
	 - 스크립틀릿
	 	- Scriptlet = Script + Applet
	 	- <% %>
	 	- 이 영역은 자바 영역이다.
	 	- 비즈니스 코드 작성 > 데이터 처리 or 동적 클라이언트 조작
	 	
	 - 익스프레션
	 	- 자바의 값을 HTML 문서에 출력
	 	- <%= 값 %>
	 	
	 - 선언부
 
 3. 액션 태그, Action Tags
	 - 기본 액션 태그
	 - 확장 액션 태그
	 - 사용자 정의 액션 태그
	 

JSP 내장 객체, JSP Implicit Object
	- 개발자가 직접 생성하는 객체가 아니라, JSP가 미리 만들어서 제공하는 객체(톰캣) 
	- 예약어 제공
	- 서블릿에도 존재함 > 예약어(X), 직접 생성 or 매개 변수
	- request, response, session, pageContext, out, application, config, page, exception
	- request, response, session, pageContext > out, application > config, page, exception
	
	- request, session, pageContext, application
	> 객체 내부에 사용자 데이터를 관리하는 저장소를 가진다.(***)
	> setAttribute(key, value), getAttribute(key)
	

1. request
	- 클라이언트 -> (행동) -> 서버
	a. 전송된 데이터 가져오기 (*****)
	b. 전송된 데이터 인코딩 (***)	
	c. 요청에 관련된 정보 가져오기
	
	
2. response
	- 서버 -> (행동) -> 클라이언트
	a. 돌려줄 페이지 제작 > response.getWriter() > PrintWriter
	b. 돌려줄 페이지 인코딩 > response.setCharacterEncoding("UTF-8")
	>> <%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%> 여기서 인코딩을 해줘서 따로 안 해줘도 됨.
    c. 돌려줄 내용의 MIME 지정 > 파일 업로드 수업..
    d. 페이지 이동하기
    
    
3. pageContext
	- 페이지 실행(요청~응답)중에 관련된 데이터를 저장하는 객체
	a. 페이지 이동하기
		- forward()


4. out
	- 응답 페이지 전송을 위한 출력 스트림 객체
	- 서블릿의 PrintWriter와 같은 역할
	

5. session




6. application



pageContext, request, session, application > 저장소 제공
- 4개의 저장소 차이 > 생명 주기(***) 차이 때문에 구분해서 사용한다.



Cookies




/* 2022-01-10(월) JDBC 수업 */

JDBC -> Java Database Connectivity
- java 응용 프로그램과 데이터베이스를 연결시켜주는 중간 계층


"주소록" + CRUD > 사이트 제작
1. 업무 > 생략
2. DB 작업 > ERD 생략 > 테이블 생성
3. 클라이언트 작업 > 레이아웃 > 기본 골격 코드 작성(HTML, CSS..)
	- webapp > address 폴더 생성
				> "list.jsp"
				> "add.jsp"
				> "addok.jsp"
				> "edit.jsp"
				> "editok.jsp"
				> "del.jsp"
				> "delok.jsp"
				> "template.jsp" > 전체 레이아웃 구성
	
	- webapp > address > "inc" 폴더 생성
						> "header.jsp"
						> "asset.jsp"
						
	- webapp > address > "asset" 폴더 생성
						> "main.css"
						
						
						
						
웹보안
- 로그인, 로그아웃
- 현재 접속자가 해당 사이트의 구성원인지 확인하고 특정 행위에 대한 허가를 하는 작업
- 세션 or 쿠키 > 인증(로그인) > 인증 티켓 발급 > 특정 행위 허가 유무 판단


1. 인증, Authentication
	- 현재 접속자가 해당 사이트의 구성원인지 확인


2. 허가, Authorization
	- 특정 행위에 대한 허가를 하는 작업

- webapp > "auth" 폴더 생성
- webapp > auth > "index.jsp" 초기화면
				> "login.jsp" 로그인 폼 페이지
				> "loginok.jsp" 로그인 처리 페이지 > 인증 작업
				> "logout.jsp" 로그아웃 페이지
				> "member.jsp" 회원전용 페이지 > 허가 작업
				> "admin.jsp" 관리자 전용 페이지 > 허가 작업
				
				

JSP Model
1. 여태까지의 방식 > JSP Model 1
	- HTML + CSS + JavaScript + Java + Servlet + JSP = *.jsp
	
2. 이후의 방식 > JSP Model 2(= MVC 디자인 패턴을 따와서 만든 모델)



업무 코드(페이지, 파일) = 수 많은 성격의 코드 집합


MVC 디자인 패턴
- Model			> 데이터 코드 담당
- View			> 출력 코드 담당
- Controller	> 통제(비즈니스) 코드 담당


Servlet
- 자바기반 + 웹 추가
- 자바 작성 O, 웹 작성 X

JSP
- 웹 기반 + 자바 추가
- 웹 작성 O, 자바 작성 X 

Servelt + JSP -> MVC 디자인 패턴 구현
- 자바 작성	> Servlet 작성
- 웹 작성	> JSP 작성

고객이 페이지 주문 > Servlet 알바생 > 페이지 제작
고객이 페이지 주문 > JSP 알바생		> 페이지 제작
고객이 페이지 주문 > Servlet 알바생 + JSP 알바생 > 페이지 제작

Hello world!
- com.test.mvc > Hello.java
- webapp > "mvc" > hello.jsp 


			
JSP Model 2 + EL + JSTL
- com.test.mvc > "Address.java"
				> "AddressDAO.java"
				> "AddressDTO.java"
				> "DBUtil.java" 복사
				
- webapp > mvc > "address.jsp"

- com.test.mvc > "EL.java"
- webapp > mvc > "el.jsp"


/* 20220-01-19(수) Open API */
네이버 책 검색 API
- com.test.openapi > "Book.java"(S)"
- com.test.openapi > "BookDAO.java
- com.test.openapi > "BookDTO.java


- openapi > "book.jsp"(V)"


/* 20220-01-20(목) Open API */
https://apis.map.kakao.com/

지도 Open API
- com.test.openapi > "Map.java"(S)
- com.test.openapi > "MapDAO.java"
- com.test.openapi > "MapDTO.java"
- openapi > "map.jsp"





/* 20220-01-21(금) Ajax */

Ajax, Asynchronous JavaScript and XML
- 비동기 JavaScript 통신 기술
- 웹서버와 웹클라이언트 간에 Ajax 기술을 사용해서 데이터를 주고 받는다. 주고 받는 데이터의 형식이 XML이다.
- 통신은 비동기로 구현된다.
- 브라우저(클라이언트)는 서버로부터 웹페이지(HTML)의 전체 소스를 제공받는다.


Ajax가 뭡니까?
1. 자바스크립트 비동기 통신 기법(기술)입니다.
2. 새로고침없이(깜빡임없이) 서버와 데이터를 주고 받는 기술입니다. > 표면적 특성
3. 서버와 데이터를 주고 받는 기술 > (전체 페이지를 주고 받지 않고) 필요한 정보만 주고 받는 기술
	> 자원 처리 비용 감소
	> 트래픽 감소
	> (클라이언트 입장) 속도 향상
	> 단점 : 개발자 너무 힘들다;;;



상황A. 여태까지의 수업
- 브라우저(클라이언트)는 서버로부터 웹페이지(HTML)의 전체 소스를 제공받는다. > 해석 > 렌더링
- 웹서버(서버) > 브라우저가 요청한 웹페이지(HTML) 전체 소스를 생성한다.

상황B. Ajax
- Ajax 객체(클라이언트) > 서버로부터 *데이터*의 요청 + 제공 받는다. 
- 웹서버(서버) > Ajax 객체가 요청한 데이터를 생성한다.


기존 방식 vs Ajax 방식
- "Ex02A.java", "ex02a.jsp", "Ex02AOk.java"
- "Ex02B.java", "ex02b.jsp", "Ex02BOk.java"
- "AjaxDAO.JAVA AjaxDTO.JAVA


- com.test.ajax > "Ex03.java", "Ex03Data.java"
- ajax > "ex03.jsp"
				









