JSP, Java Server Pages
- 서블릿의 다음 버전


서블릿
1. 장점 > 자바 기반, 자바 구문을 사용할 수 있다. > 자바 클래스 사용
2. 단점 > 자바 베이스 > 클라이언트 코드 작성이 불편하다. > 문자열 취급
		> 가상 주소 매핑 필요


JSP
1. 장점 > HTML 문서 기반 > 클라이언트 코드 작성이 쉽다. > 구문 인식
		> 가상 주소 매핑 불필요 > 직접 호출 가능
2. 단점 > HTML 문서 베이스 > 자바 구문 작성이 불편하다.



JSP 요소
1. JSP 지시자, JSP Directive
	- page 지시자
	- include 지시자
		- <%@ include file="경로" %>
		- 특정 JSP/HTML 페이지를 다른 JSP 페이지의 일부 영역에 삽입하는 기술
		- 조각 페이지
		- <iframe> 태그와 유사
		- 여러 페이지에서 반복되는 내용을 조각 페이지로 만들어서 재사용하기 위해서 사용!
		
	- taglib 지시자

2. 스크립트 요소, Scripting Elements
	 - 스크립틀릿
	 	- Scriptlet = Script + Applet
	 	- <% %>
	 	- 이 영역은 자바 영역이다.
	 	- 비즈니스 코드 작성 > 데이터 처리 or 동적 클라이언트 조작
	 	
	 - 익스프레션
	 	- 자바의 값을 HTML 문서에 출력
	 	- <%= 값 %>
	 	
	 - 선언부
 
 3. 액션 태그, Action Tags
	 - 기본 액션 태그
	 - 확장 액션 태그
	 - 사용자 정의 액션 태그
	 

JSP 내장 객체, JSP Implicit Object
	- 개발자가 직접 생성하는 객체가 아니라, JSP가 미리 만들어서 제공하는 객체(톰캣) 
	- 예약어 제공
	- 서블릿에도 존재함 > 예약어(X), 직접 생성 or 매개 변수
	- request, response, session, pageContext, out, application, config, page, exception
	- request, response, session, pageContext > out, application > config, page, exception
	
	- request, session, pageContext, application
	> 객체 내부에 사용자 데이터를 관리하는 저장소를 가진다.(***)
	> setAttribute(key, value), getAttribute(key)
	

1. request
	- 클라이언트 -> (행동) -> 서버
	a. 전송된 데이터 가져오기 (*****)
	b. 전송된 데이터 인코딩 (***)	
	c. 요청에 관련된 정보 가져오기
	
	
2. response
	- 서버 -> (행동) -> 클라이언트
	a. 돌려줄 페이지 제작 > response.getWriter() > PrintWriter
	b. 돌려줄 페이지 인코딩 > response.setCharacterEncoding("UTF-8")
	>> <%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%> 여기서 인코딩을 해줘서 따로 안 해줘도 됨.
    c. 돌려줄 내용의 MIME 지정 > 파일 업로드 수업..
    d. 페이지 이동하기
    
    
3. pageContext
	- 페이지 실행(요청~응답)중에 관련된 데이터를 저장하는 객체
	a. 페이지 이동하기
		- forward()


4. out
	- 응답 페이지 전송을 위한 출력 스트림 객체
	- 서블릿의 PrintWriter와 같은 역할
	

5. session




6. application



pageContext, request, session, application > 저장소 제공
- 4개의 저장소 차이 > 생명 주기(***) 차이 때문에 구분해서 사용한다.



Cookies




/* 2022-01-10(월) JDBC 수업 */

JDBC -> Java Database Connectivity
- java 응용 프로그램과 데이터베이스를 연결시켜주는 중간 계층


"주소록" + CRUD > 사이트 제작
1. 업무 > 생략
2. DB 작업 > ERD 생략 > 테이블 생성
3. 클라이언트 작업 > 레이아웃 > 기본 골격 코드 작성(HTML, CSS..)
	- webapp > address 폴더 생성
				> "list.jsp"
				> "add.jsp"
				> "addok.jsp"
				> "edit.jsp"
				> "editok.jsp"
				> "del.jsp"
				> "delok.jsp"
				> "template.jsp" > 전체 레이아웃 구성
	
	- webapp > address > "inc" 폴더 생성
						> "header.jsp"
						> "asset.jsp"
						
	- webapp > address > "asset" 폴더 생성
						> "main.css"



