/*** 게시판 예제 ***/


1. 게시판
2. 회원(인증)
3. 부가기능
4. Bootstrap + jQuery
5. JSP Model 2(MVC 디자인 패턴)


자주쓰는 기능을 자바 프로젝트로 만들어서 jar 파일로 만들어둠

1. 폴더 구조 생성 + 라이브러리 설치
	a. 자바 라이브러리
		1. JDBC
			- webapp > WEB-INF > lib > ojdbc6.jar 복사
		2. JSTL
			- webapp > WEB-INF > lib >jstl-1.2.jar 복사
		3. DBUtil
			- webapp > WEB-INF > lib > mylibrary.jar 복사
	b. 클라이언트 라이브러리
		1. jQuery
			- webapp > asset 복사
		2. Bootstrap
			- webapp > asset 복사
			

			
2. 패키지 구조 생성(서블릿) + 뷰 구조 생성(JSP)
	a. 패키지
		- "com.test.main" > 메인
		- "com.test.main.board" > 게시판. 조금 더 관리하기가 쉬움! 
		- "com.test.main.member" > 회원
		- "com.test.main.etc" > 부가 기능
		// - "com.test.main.db" > DAO, DTO (X) > 수업 중에서는 DB 패키지를 만들기 보단, 각 구조에서 따로 사용
		
	b. 뷰 구조 (
		- webapp > WEB-INF > "views" 뷰 루트 폴더
			- views > "board" 게시판
			- views > "member" 회원
			- views > "etc" 부가 기능
			- views > "inc" 조각 페이지
			

3. 파일 생성
	- S : 서블릿
	
	
	a. 클래스
		1. com.test.main
			- Main.java(S) > 초기 페이지
			- Template.java(S) > 템플릿 페이지
		2. com.test.main.board
			- List.java(S) > 목록
			- Add.java(S) > 글쓰기(폼)
			- AddOk.java(S) > 글쓰기(처리)
			- View.java(S) > 글보기
			- Edit.java(S) > 수정하기(폼)
			- EditOk.java(S) > 수정하기(처리)
			- Del.java(S) > 삭제하기(폼)
			- DelOk.java(S) > 삭제하기(처리)
			- BoardDAO.java > DAO
			- BoardDTO.java > DTO
			
			- AddCommentOk.java(S) > 댓글쓰기(처리) > *.jsp는 안 만들고 진행!
			- CommentDTO.java > DTO > * DAO 안 만들고 진행! > board에 종속되는 친구라
			- DelCommentOk.java(s) > 댓글삭제(처리) > *.jsp는 안 만들고 진행!
			
		3. com.test.main.member
			- Member.java(S) > 초기페이지
			- Login.java(S) > 로그인(폼)
			- LoginOk.java(S) > 로그인(처리)
			- LogoutOk.java(S) > 로그아웃(처리)
			- MemberDAO.java > DAO
			- MemberDTO.java > DTO
			
		
		
	b. 뷰페이지
		1. views
			- main.jsp > 초기페이지
			- template.jsp > 템플릿 페이지
		2. views > board
			- list.jsp > 목록
			- add.jsp > 글쓰기(폼)
			- addok.jsp > 글쓰기(처리)
			- view.jsp > 글보기
			- edit.jsp > 수정하기(폼)
			- editok.jsp > 수정하기(처리)
			- del.jsp > 삭제하기(폼)
			- delok.jsp > 삭제하기(처리)
		3. views > member
			- member.jsp > 초기페이지
			- login.jsp > 로그인(폼)
			- loginok.jsp > 로그인(처리)
			- logoutok.jsp > 로그아웃(처리)	 
		4. views > inc
			:: 프로젝트 볼륨이 커지면 공통부분도 페이지 특성에 따라 달리 만들어야한다.
			- header.jsp > 상단부
			- footer.jsp > 하단부
			- asset.jsp > 클라이언트 라이브러리
			
		
4. URL 구조
	- "/code/main.do" 메인(시작 페이지)
	- "/code/board/xxx.do" 게시판
		- "/code/board/list.do" 목록
		- "/code/board/add.do" 글쓰기(폼)
		- "/code/board/addok.do" 글쓰기(처리)
		- "/code/board/view.do" 글보기
		...
	- "/code/member/xxx.do" 회원
	- "/code/etc/xxx.do" 부가기능
	

5. DB 관련
	- DAO
	- DTO
	
------------------------------------------------------------------- 기초 작업 + 공통 작업


6. 각 파트별 업무 구현
	a. 로그인, 로그아웃
	b. 게시판
	c. 부가기능



7. 정책
	a. 로그인 O
		- 모든 행동
	b. 로그인 X
		- 목록보기 O
		- 글보기 O
		- 글쓰기 X
		- 수정하기 X
		- 삭제하기 X





** 게시물 삭제하기 + 게시물에 댓글이 달렸을 때 > FK 제약 사항
1. 게시물 삭제 + 댓글 강제 삭제
	- 다른 작성자가 작성한 댓글을 게시물 작성자가 삭제할 권한이 있는가?
2. 게시물 삭제 + 댓글 존재 > 게시물 삭제 불가!
3. 게시물 삭제 > 게시물의 삭제가 아닌 수정 > 내용을 전부 확인 불가능 상태로.



** cascade > X 
	- 실무에서는 거의 사용 X
	- 예측 불가, 감당이 힘듦



답변형 게시판 or 계층형 게시판
- thread(number), deapth(number) 컬럼 추가


1. 새 글쓰기
	- /board/add.do
	- a. 현존하는 모든 게시물 중에 가장 큰 thread 값을 찾는다. 그 값에 + 1000을 한 값을 새글의 thread값으로 사용한다.
	- b. 새 글의 depth는 0을 넣는다.


2. 답변글 쓰기
	- /board/add.do?reply=1
	a. 현존하는 모든 게시물의 thread값을 대상으로 현재 작성 중인 답변글의 부모글의 thread값보다 작고, 이전 새글의 thread값보다 큰 thread를 모두 찾아서 -1한다.
	b. 현재 답변글의 thread값을 부모글의 thread-1을 넣는다.
	c. 현재 답변글의 depth값은 부모글의 depth+1을 넣는다.





